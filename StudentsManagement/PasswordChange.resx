<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABGdBTUEAALGPC/xhBQAAABl0RVh0U29m
        dHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAA0LSURBVHhe7Z1NrxxHFYavP67ZIiH4CaxY8BPYZJ89
        MXbs62+bBIRQQEhsSLZILNhECMMOVv4DCBlwxAYJscgCmWBMLjh2ruPYxo6dGzf1dvfpOV3zVnVVd/XM
        5FYtHrvnTK41k+c9p2q6585sVVVVyBhaLOQDLRbygRYL+UCLhXygxUI+0GIhH2ixkA+0WMgHWiysn/17
        t6pPf/ud6t4bX6senjpSfWz46NUj1cPLX6r23t6pcL/9M2OgxcJ62b9xtRb9+PRhI/9wLf9BG4D7hj3D
        hyeP1gGxfzYWWiysD8h/YsRD/qOBANwzYBrY/0YMtFhYDyL/fxEBuDsxBLRYWD2Q/3TncD8ARv5QAD4w
        3DkxPgS0WFgtL278svpk55AjAM0G8IGR7gvAf09sjwoBLRZWB+Q/M/JjAqDHvw7Af0aEgBYLqwHyn585
        5A3A0PoP+ToAu9+KCwEtFuYH8j818p8b8XYAYjaAvQAY+QhATAhosTAvkL9v5OsAjNkA2gEQ+f823D4e
        FgJaLMxHT77Bv/63ATDS/RvAo9341wG4dfzYYAhosTAPkP/Zma2IAMRtAPsBOFYHYCgEtFhID+S/OLvV
        D4ARzwIwav33BOC9V9whWCoU0gP5lZHvCsBS948JQCvfFQBXCHo3CjPwjpJvSLX+SwB8678dgJuvfGEp
        BP0HW0gL5J8zh6z7BwPgPgM4vP4vAiDyJQB//2Y/BP0HXEiHku8b/zoAo8f/UgB490O+cP/aW+ZhlgDM
        A+SfN4e6+w37JgBR4z80AK38mAAAvKmk/8AL09HyR4//edZ/OwBYChYPvDCdP7fyVfeHjn97/fd1/5T1
        X4O3mzUPvDAdyL9gDq0AzD7+lwLg7/6bx/shaB58YRoiXwKwgvHfBaCVLwEQ+SwAkP/eyWMlAEmB/Ivm
        kHT/2PGvA+Ae//Hr/79eNbdLABKi5afs/sTjH0D8++e2ewHYffMl8qQKYYh81v1rGv+uAIh88I8TiwDg
        XIB5pIVoIP+SObS7X41/vflj4x/yQS3fENL9Y8a/ln/77HYn/5+vf7V68eQj8uQKfrT8Obo/4fjHmr97
        fiFfvwJ4+u5183TKmcA4RP5A99MAqO4P2fxNHf9aPtBr/8fXf22eTvOc6j8KAdjyU3W/IfX4F/kSAJd8
        0B0UPED+ZXM4W/dHbv4841/LBz75oHejQGDyZ+p+VwDs7neN/1j5YKlQUIh8CYCWn7r7PePf3/3N+N89
        tV3duRAnH9BiwWDLT9T9APIXAZi++RP5EgBMAjn755MPaDF7IP+KOXTJlwAo+XN1/9CVvynyAS1mjZZv
        B4CN/sju7wcgsvutAGj5APLxEhABCJEPaDFbfPI93V/Ln7X7+y/9aoz8Dy6Y+yfIB7SYJSI/ZPRLAIz0
        mO6ftPbrADjkgxj5gBazw5Y/cvSn6n6gu7+3+TPy714097cBmCIf0GJWDMn3jP7Q7u/kdwEY2f2WfNzG
        S8Cx8gEtZkOs/MDRn6r7uwAY+XdON/IlAFr+4z/8yjwd8vwCoMVYcFmxeuenVfWzr1fVj0xJwO3f/TjZ
        Z9olRcuXAITI16PfDoBPvkHkx3a/Sz6YIh/QYgz7f7tWVT/5cl+88MMW3P8X8z+c/PxagPxvm8OQ7ify
        Q0f/cve38h3dr3f+EgAtH6SUD2gxGEh1SWf85qT5MfLvrJIY+RGjP2bjF9r9c8sHtBiEls9kM35gWGcI
        psjXo7+WHz76Qzd+eucP+XuWfLnok0o+oMVBIJ8JdgHxmnWEIJF83+gHfPQvb/x83c/lN92fUj6gRS8x
        8m3xmlWGIIH8UaPfELrxk+6/e/rokny56JNaPqBFJyHymWyb77esIgQzyR8a/Yvu92/8dPeLfAnAQv72
        LPIBLVJc8plgFyJeM2cIhuQPBWBJPh/97l1/f/S7up/JxzKAkz8IwFzyAS0uoeUzsUMw8Zo5QjBVfhuA
        Wn4XAL7u+3b9IaMf8u9fNPe1AViVfECLPSCfSR2CifaRMgQJ5bN1H/J96/7Q6NcBWKd8QIsdsfKZ2BC+
        15IiBDPLd637vtEP+az77+1w+WAV8gEt1oTIZzJjEPGaKSGAfBE/QX5/3W/k1wEg8n3rvm/0i3wJwDrk
        A1qk8pnAsTDxmjEhGJIv4hPJd637vhM+EoC9DZEPlouQz6SlgMnWfFcRE4KZ5NvrPuSPWfd19zP5cq1/
        1fJBvzCHfCbaRovX/OLl+hcYe49RgfvqL06yxTP5Ij5Ifn/d98l3rfts9Gv5oJZ/Yn3yweJGSvlMMoNJ
        F15veeOL9TSorzre/H1HLR73ubo+oXx73ffJd637kP/g0kI+dv/rlg+aA/xPZSJDYXJdMNkaES9gR88Q
        8aHyRXwC+fa6D/m+dX9T5YPmANfrmVgGkxoCk62ZIl7LF/EzyO+t+wPyJQBMvrzLZ93ywWL0M2lTYaJt
        QsUDJp91PZMv4lv5EL+Qv7zhC5HPNn26+53yDZsgH2xVV19uZKUIARPsYqp4l3wRz+Qb4Zsg/8kfN0M+
        2Kp+/o1G3pgRz8T6iJEOYsSzrg+QD/HB8g1Mvr3ui3wJwKbKB/0A4ISPLRkwmaHY0mPFh8j3db0l376w
        sxr5RzdSPmgCAFESAGBLjGWMdBArPla+Eb8kX4mfSz66fxPlg636jJuI06d9tdAhmHDAJDNSidfylfjF
        yF/IR9fPLR/X+TdZPmje1i0i9RRgIWCSbZhghk+6Ld4ln4l3yu9v9lzyIb6TX4s/uPJBc4Bf4BCBEK/R
        cm2YWB+29LHiB7pe5NORb7DX+1zlg/qP/dt/bU6rilgWAiY0hBDpU8U7u96S34rX8u2Rn5N8sLghb6QA
        LARa6hBMOoiRPkF8zMjPWT7oF3QIQEgImGjBFs6kTxQ/2PUG3fUu+Y+UfIjPQT5YLtohwHkACQCOfdKZ
        cGALBz7ptniH/NCu1yOfrveZyge02HuDBQvBkHBgCwe29CHxWjoT38rX4seM/CX5SvxBlg9osQYhEJmQ
        DfEaHQAmW4iV7hFvdz0b976uZ/Lt9T4n+YAWO3QIAM4FSABwzOQz4cCWPkG8q+u1eNb1QyM/N/mAFnsg
        BCKXhcAlnQkHI6QPiY/teibfXu9zkA9ocQmEQMRCuB2CGOFMukO8rPGh4kO7no38HOUDWqRICCAVf+Nc
        AeQDHPuEgwHpPfGt9FjxsV3vGvm5yAe06AQhENFAhwCvFuwAREjX4kX6WPG+rh8a+Vo+xIv8Tb+qNxZa
        9CJfjQogHOJ1CJj4VrZPOuv2seJju17k1+/ePdV/63Yjf/tAyge0OIh8MzaAcDsEI6QvdTsYIx4EdL09
        8iEfspn8TX0zRwpoMQiEoJVbC4d4LAnAHL8wtU54gHTW7anED3V9rvIBLYby4kYTglq0CsFnr7W04uWE
        jU866/Z48Xzc+7o+Z/mAFmNACLruNsL3rxzqAlAfm5oW7pLOuj1GfO+lnYGJXxr5mcsHtBgLQiDdLSHY
        f63FHD8/OyyddXuMeFfXM/E9+Rf68iF+U35pYxXQ4hgQgq7DjXAdgmdXDlfPTD1W+hTxtvyeeEt+91u6
        Rv4m/LrWKqHFsSAEXYdDOMQrPjljcEjX4kV6Ld7IZmt8qHhbfv2ZPIYl+UZ8bvIBLU4BIeg63EwCOwRD
        I76WDnriF9KniMeZPPwN+RC/7g9n2ARocSr7N652XY6ut0MQJr0vvpY+QnyR74cWU4AQSJcjCL0AGB7t
        HBmUzrp9jHiR/+GFRnyRv4AWU/H8T1cXHW6EQ7zw+JKpmbpTOjBybemx4ot8P7SYEoRAupyFwCeddXuM
        eFzA0fL1J3AW+Q20mBqEAF0OEAKI1yGAeCaddXuoeJzMEfnywcsif1Ufwvh5gBbnACGQLkcIHl42o79F
        QhDS7SHi69fzp7Z78uWDl4v8PrQ4FwhB1+mn+yHA9Xdcih3q9iHxAMdFfhi0OCcIgXQ6QgDxEoD6JZqp
        h3Q7E4+TOfgbX6xky5/zI9c/z9Di3CAE0unoesgXEAIRD+lcfNPlIl42dUw+xM/1ZQsHAVpcBbjSJl0u
        78LRIXCN+U58K90vP/137Bw0aHFVIATS6fZl2b3zTQjsbrfF2/JTf6/eQYcWVwlCIF0O4fpULTZyeOnG
        pAOs7ZAt4ov8eGhx1SAE0ukIgT5xA/DR6nUQzP21fCMZiHSgv0u3yA+HFtcBQiCC9UhnaOlCkT8OWlwX
        ECfj3Q6BSLfFA3yFOsRP/SLlHKHFdQKBctIGvH+uCYItHeye739/fpEfDy2uG4iUl3Dg9olj9YhHGEA9
        7k1NxIOx35+fO7S4CdQhOPeVLgQy4hlF/nhocVPYv3er2nt7h0oHu2++VNWfcEZ+thAGLW4a+GqYp+9e
        r+5fe6sGH26JcNj/XSEeWizkAy0W8oEWC/lAi4V8oMVCPtBiIR9osZAPtFjIB1os5AMtFvKBFgv5QIuF
        fKDFQi5UW/8HmKebEXgcfKwAAAAASUVORK5CYII=
</value>
  </data>
</root>